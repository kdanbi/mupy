{"version":3,"sources":["components/landing/mupy_logo.svg","components/landing/mupy_name.svg","components/header/header-left.svg","components/header/group.svg","components/landing/Landing.js","components/header/Header.js","components/chat/Bot-Bubble.js","components/chat/User-Bubble.js","components/chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Box","posed","div","hidden","opacity","visible","Landing","state","getStarted","isVisible","changeState","_this","setState","handleSubmit","e","preventDefault","user_name","input","value","_this2","this","setInterval","react_default","a","createElement","className","pose","src","mupy","alt","href","onClick","logo","React","Component","ChatHeader","props","react_router_dom","to","headerLeft","headerRight","BotBubble","ref","thisRef","message","UserBubble","spotifyApi","SpotifyWebApiNode","clientId","clientSecret","redirectUri","data","userMessages","botMessages","botGreeting","botLoading","moodIdentifier","spotifyURL","shouldContinue","Chat","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateUserMessages","newMessage","updatedMessages","updatedBotMessages","concat","request","Request","headers","Headers","Authorization","fetch","then","response","json","botResponse","result","fulfillment","speech","currentMood","keys","parameters","catch","error","console","log","scrollBubble","element","scrollIntoView","showMessages","allMessages","i","length","push","User_Bubble_UserBubble","Bot_Bubble_BotBubble","unshift","onInput","event","userInput","target","componentDidUpdate","searchPlaylists","join","body","playlists","items","num","Math","floor","random","playlistID","uri","slice","err","token","getHashParams","access_token","setAccessToken","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","Header","onSubmit","id","type","name","placeholder","title","frameBorder","allowtransparency","allow","App","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e3088e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mupy_logo.9ee84792.svg\";","module.exports = __webpack_public_path__ + \"static/media/mupy_name.337e84c1.svg\";","module.exports = __webpack_public_path__ + \"static/media/header-left.ed7d4d6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/group.a2fedce9.svg\";","import React from 'react';\nimport './landing.scss';\nimport '../../App.scss';\nimport logo from './mupy_logo.svg';\nimport mupy from './mupy_name.svg';\nimport posed from 'react-pose';\n\nconst Box = posed.div({\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 }\n  });\n\nexport default class Landing extends React.Component {\n    state = {\n        getStarted: false,\n        isVisible: true\n    }\n    componentDidMount() {\n        setInterval(() => {\n          this.setState({ isVisible: !this.state.isVisible });\n        }, 1000);\n    }\n    changeState = () => {\n        this.setState({getStarted: true})\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.setState({ user_name: this.input.value }) //setState is always async; accepts callback function so console.log that way or use sync-await to synchroniously console.log afterwards.\n    }\n    render () {\n        return (\n            this.state.getStarted ? (\n                <section className=\"landing-page\">\n                    <div className=\"landing-page__partB\">\n                        <img pose={this.state.isVisible ? 'visible' : 'hidden'} className=\"landing-page__partB---logo\" src={mupy} alt=\"logo\" />\n                        <a className=\"landing-page__partB--intro\" href=\"http://localhost:8888\"> Discover your sound</a>\n                    </div>\n\n                </section>\n            ) :\n            (            \n            <section className=\"landing-page\">\n                <Box pose={this.state.isVisible ? 'visible' : 'hidden'} className=\"landing-page__partA\">\n                    <img className=\"landing-page__partA--logo\" onClick={this.changeState} src={logo} alt=\"logo\" />\n                    <h2 className=\"landing-page__partA--intro\">Music therapy anytime.</h2>\n                </Box>\n            </section>\n        )\n        )\n    }\n}","import React from 'react';\nimport '../chat/chat.scss';\nimport headerLeft from './header-left.svg';\nimport headerRight from './group.svg';\nimport { Link } from 'react-router-dom';\n\nlet ChatHeader = props => {\n    return (\n      <div className=\"chat-header\">\n            <Link to=\"/\"><img className=\"chat-header__left\" src={headerLeft} alt=\"app logo\" /></Link>\n            <img className=\"chat-header__right\" src={headerRight} alt=\"app logo\" />\n      </div>\n    );\n  };\n\nexport default ChatHeader;","import React from 'react';\nimport './chat.scss';;\n  \nexport default class BotBubble extends React.Component {\n    render() {\n        return (\n        <div className=\"bot-message-container\" ref={this.props.thisRef}>\n            <div className=\"bot-avatar\" />\n            <div className=\"chat-bubble bot\">\n            {this.props.message}\n            </div>\n        </div>\n        );\n    }\n}","import React from 'react';\nimport './chat.scss';\n\nexport default class UserBubble extends React.Component {\n    render() {\n      return (\n        <div className=\"user-message-container\" ref={this.props.thisRef}>\n          <div className=\"chat-bubble user\">\n            {this.props.message}\n          </div>\n        </div>\n      );\n    }\n  }","import React from \"react\";\nimport \"./chat.scss\";\nimport ChatHeader from \"../header/Header\";\nimport BotBubble from \"./Bot-Bubble\";\nimport UserBubble from \"./User-Bubble\";\nimport SpotifyWebApiNode from \"spotify-web-api-node\";\n\nlet spotifyApi = new SpotifyWebApiNode({\n  clientId: \"f5e8e6f86fdd4361a33a3daaa5bcf808\",\n  clientSecret: \"71a41656726a455a9cc526e9cbf2b168\",\n  redirectUri: \"http://localhost:8888/callback\"\n});\n\nlet data = {\n  userMessages: [],\n  botMessages: [],\n  botGreeting: `Hi I'm mupy - your music therapy bot! What's your name?`,\n  botLoading: false,\n  moodIdentifier: [],\n  spotifyURL: \"\",\n  shouldContinue: false\n};\n\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = data;\n  }\n  //authentication\n  componentDidMount() {\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n  }\n  getHashParams() {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n  //Function adds user and bot messages to state\n  updateUserMessages = newMessage => {\n    //newMessage === userInput\n    if (!newMessage) {\n      return;\n    }\n    let updatedMessages = this.state.userMessages;\n    let updatedBotMessages = this.state.botMessages;\n    this.setState({\n      userMessages: updatedMessages.concat(newMessage), //adds every user message entered to userMessages in state\n      botLoading: true,\n      newMessage: newMessage,\n      shouldContinue: true\n    });\n\n    let request = new Request(\n      \"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" +\n        newMessage +\n        \"&sessionId=12345\",\n      {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      }\n    );\n\n    fetch(request)\n      .then(response => response.json())\n      .then(json => {\n        let botResponse = json.result.fulfillment.speech;\n        let currentMood = Object.keys(json.result.parameters);\n        this.setState({\n          botMessages: updatedBotMessages.concat(botResponse),\n          botLoading: false,\n          moodIdentifier: currentMood\n        });\n      })\n      .catch(error => {\n        console.log(\"ERROR:\", error);\n        this.setState({\n          botMessages: updatedBotMessages.concat(\"?\"),\n          botLoading: false\n        });\n      });\n  };\n\n  //scroll to view\n  scrollBubble = element => {\n    if (element != null) {\n      element.scrollIntoView(true);\n    }\n  };\n\n  //display msgs in state by pushing components into allMessages array\n  showMessages = () => {\n    let userMessages = this.state.userMessages;\n    let botMessages = this.state.botMessages;\n\n    let allMessages = [];\n    let i = 0; //line 98\n    for (; i < userMessages.length; i++) {\n      if (i === userMessages.length - 1) {\n        if (botMessages[i]) {\n          //if last msg was from bot\n          allMessages.push(<UserBubble message={userMessages[i]} />);\n          allMessages.push(\n            <BotBubble message={botMessages[i]} thisRef={this.scrollBubble} />\n          );\n        } else {\n          allMessages.push(\n            //if last msg was from user\n            <UserBubble message={userMessages[i]} thisRef={this.scrollBubble} />\n          );\n        }\n        break;\n      }\n      //if message is not the last message then push user and bot components to allMessages\n      allMessages.push(<UserBubble message={userMessages[i]} />);\n      allMessages.push(<BotBubble message={botMessages[i]} />);\n    }\n\n    allMessages.unshift(\n      //include greeting\n      <BotBubble\n        message={this.state.botGreeting}\n        thisRef={i === 0 ? this.scrollBubble : \"\"}\n      />\n    );\n\n    return <div className=\"msg-container\">{allMessages}</div>; //All messages displayed on chat\n  };\n\n  //Invoke updateUserMessages function passing in userInput as parameter\n  onInput = event => {\n    event.preventDefault();\n    let userInput = event.target.message.value;\n    //console.log(userInput)\n    this.updateUserMessages(userInput);\n    event.target.message.value = \"\";\n  };\n\n  componentDidUpdate = () => {\n    let request = new Request(\n      \"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" +\n        this.state.newMessage +\n        \"&sessionId=12345\",\n      {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      }\n    );\n\n    if (\n      !this.state.moodIdentifier.length > 0 ||\n      this.state.shouldContinue === true\n    ) {\n      fetch(request) //fetch mood keyword from DialogFlow\n        .then(response => response.json())\n        .then(json => {\n          let currentMood = Object.keys(json.result.parameters);\n          return currentMood;\n        })\n        .then(currentMood => {\n          spotifyApi\n            .searchPlaylists(currentMood.join(\", \")) //query\n            .then(data => {\n              console.log(\"playlists\", data.body.playlists.items);\n              let num = Math.floor(\n                Math.random() * data.body.playlists.items.length\n              );\n              console.log(data.body.playlists.items);\n              let link = data.body.playlists.items[num].uri;\n              let playlistID = link.slice(17);\n              let spotifyURL = `https://open.spotify.com/embed/playlist/${playlistID}`;\n              this.setState({\n                spotifyURL: spotifyURL,\n                moodIdentifier: currentMood,\n                shouldContinue: false\n              });\n            })\n            .catch(err => {\n              console.log(err);\n            });\n        });\n    }\n  };\n\n  render() {\n    console.log(\"mood\", this.state.moodIdentifier);\n    console.log(\"spotify\", this.state.spotifyURL);\n    return (\n      <div className=\"app-container\">\n        <div className=\"chat-container\">\n          <ChatHeader />\n          {this.showMessages()}\n          <form onSubmit={this.onInput} className=\"input-container\">\n            <input\n              id=\"chat\"\n              type=\"text\"\n              name=\"message\"\n              placeholder=\"Your message here.\"\n            />\n            <button type=\"submit\" className=\"input-submit\" />\n          </form>\n          <iframe\n            title=\"this is unique\"\n            id=\"spotify\"\n            src={this.state.spotifyURL}\n            frameBorder=\"0\"\n            allowtransparency=\"true\"\n            allow=\"encrypted-media\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Landing from \"./components/landing/Landing.js\";\nimport Chat from \"./components/chat/Chat.js\";\n//import Main from './components/Main.js';\n\n//const pingURL = `${process.env.REACT_AOO_BACKEND_SERVER || 'http://localhost8080.com'}/ping`\n\nclass App extends React.Component {\n  render() {\n    return (\n\t\t<BrowserRouter>\n\t\t\t<div className=\"App\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Landing} />\n\t\t\t\t\t<Route path=\"/chat\" component={Chat} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</BrowserRouter>\n  \t);\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}