{"ast":null,"code":"'use strict';\n\nvar superagent = require('superagent'),\n    WebApiError = require('./webapi-error');\n\nvar HttpManager = {};\n/* Create superagent options from the base request */\n\nvar _getParametersFromRequest = function (request) {\n  var options = {};\n\n  if (request.getQueryParameters()) {\n    options.query = request.getQueryParameters();\n  }\n\n  if (request.getHeaders() && request.getHeaders()['Content-Type'] === 'application/json') {\n    options.data = JSON.stringify(request.getBodyParameters());\n  } else if (request.getBodyParameters()) {\n    options.data = request.getBodyParameters();\n  }\n\n  if (request.getHeaders()) {\n    options.headers = request.getHeaders();\n  }\n\n  return options;\n};\n/* Create an error object from an error returned from the Web API */\n\n\nvar _getErrorObject = function (defaultMessage, err) {\n  var errorObject;\n\n  if (typeof err.error === 'object' && typeof err.error.message === 'string') {\n    // Web API Error format\n    errorObject = new WebApiError(err.error.message, err.error.status);\n  } else if (typeof err.error === 'string') {\n    // Authorization Error format\n\n    /* jshint ignore:start */\n    errorObject = new WebApiError(err.error + ': ' + err['error_description']);\n    /* jshint ignore:end */\n  } else if (typeof err === 'string') {\n    // Serialized JSON error\n    try {\n      var parsedError = JSON.parse(err);\n      errorObject = new WebApiError(parsedError.error.message, parsedError.error.status);\n    } catch (err) {// Error not JSON formatted\n    }\n  }\n\n  if (!errorObject) {\n    // Unexpected format\n    errorObject = new WebApiError(defaultMessage + ': ' + JSON.stringify(err));\n  }\n\n  return errorObject;\n};\n/* Make the request to the Web API */\n\n\nHttpManager._makeRequest = function (method, options, uri, callback) {\n  var req = method.bind(superagent)(uri);\n\n  if (options.query) {\n    req.query(options.query);\n  }\n\n  if (options.data && (!options.headers || options.headers['Content-Type'] !== 'application/json')) {\n    req.type('form');\n    req.send(options.data);\n  } else if (options.data) {\n    req.send(options.data);\n  }\n\n  if (options.headers) {\n    req.set(options.headers);\n  }\n\n  req.end(function (err, response) {\n    if (err) {\n      var errorObject = _getErrorObject('Request error', {\n        error: err\n      });\n\n      return callback(errorObject);\n    }\n\n    return callback(null, {\n      body: response.body,\n      headers: response.headers,\n      statusCode: response.statusCode\n    });\n  });\n};\n/**\n * Make a HTTP GET request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\n\n\nHttpManager.get = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n\n  var method = superagent.get;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP POST request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\n\n\nHttpManager.post = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n\n  var method = superagent.post;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP DELETE request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\n\n\nHttpManager.del = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n\n  var method = superagent.del;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n/**\n * Make a HTTP PUT request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\n\n\nHttpManager.put = function (request, callback) {\n  var options = _getParametersFromRequest(request);\n\n  var method = superagent.put;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\nmodule.exports = HttpManager;","map":null,"metadata":{},"sourceType":"script"}