{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nvar _request = require('request');\n\nvar _ = require('lodash');\n\nvar BASE_URL = 'https://api.genius.com/';\nvar AUTH_URL = 'https://api.genius.com/oauth/authorize';\n\nvar Api = function () {\n  function Api(accessToken, options) {\n    _classCallCheck(this, Api);\n\n    if (!accessToken) {}\n\n    var defaults = {};\n    this.options = options || defaults;\n    this.at = accessToken;\n    this.AuthHeader = {\n      'Authentication': 'Bearer ' + this.at\n    };\n  }\n\n  _createClass(Api, [{\n    key: 'request',\n    value: function request(options, callback) {\n      var defaultRequest = _request.defaults({\n        baseUrl: BASE_URL,\n        headers: {\n          'Authorization': 'Bearer ' + this.at\n        }\n      });\n\n      var promise = new Promise(function (resolve, reject) {\n        defaultRequest(options, function (err, response) {\n          if (response.statusCode !== 200) {\n            var payload = {\n              'Error': response,\n              'Status': response.statusCode\n            };\n            reject(payload);\n          }\n\n          resolve(response.body);\n        });\n      });\n      return promise;\n    }\n  }, {\n    key: 'requestPromise',\n    value: function requestPromise(request) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.request(request).then(function (data) {\n          resolve(JSON.parse(data).response);\n        })['catch'](function (data) {\n          reject(JSON.parse(data.Error.body));\n        });\n      });\n    }\n  }, {\n    key: 'annotation',\n    value: function annotation(id, options) {\n      var request = {\n        url: 'annotations/' + id,\n        qs: options\n      };\n      return this.requestPromise(request);\n    }\n  }, {\n    key: 'referents',\n    value: function referents(id, options) {\n      var request = {\n        url: 'referents',\n        qs: _.merge(id, options)\n      };\n      return this.requestPromise(request);\n    }\n  }, {\n    key: 'song',\n    value: function song(id, options) {\n      var request = {\n        url: 'songs/' + id,\n        qs: options\n      };\n      return this.requestPromise(request);\n    }\n  }, {\n    key: 'artist',\n    value: function artist(id, options) {\n      var request = {\n        url: 'artists/' + id,\n        qs: options\n      };\n      return this.requestPromise(request);\n    }\n  }, {\n    key: 'songsByArtist',\n    value: function songsByArtist(id, options) {\n      var request = {\n        url: 'artists/' + id + '/songs',\n        qs: options\n      };\n      return this.requestPromise(request);\n    }\n  }, {\n    key: 'webPage',\n    value: function webPage(options) {\n      var request = {\n        url: 'web_pages/lookup',\n        qs: options\n      };\n      return this.requestPromise(request);\n    }\n  }, {\n    key: 'search',\n    value: function search(query) {\n      var request = {\n        url: 'search',\n        qs: {\n          'q': query\n        }\n      };\n      return this.requestPromise(request);\n    }\n  }]);\n\n  return Api;\n}();\n\nmodule.exports = Api; //throw new Error('Cannot instantiate genius-api without an access token');","map":null,"metadata":{},"sourceType":"script"}