{"ast":null,"code":"var _jsxFileName = \"/Users/danbikim/Development/Capstone/client/src/components/chat/Chat.js\";\nimport React from 'react';\nimport './chat.scss';\nimport ChatHeader from '../header/Header'; //Thanks to the following for help:\n// * https://codepen.io/johnludena/pen/JvMvzB\n// * https://codepen.io/jenning/pen/JZzeJW\n// * https://codepen.io/zephyo/pen/MZmdjb?editors=0110\n\nlet data = {\n  userMessages: [],\n  botMessages: [],\n  botGreeting: \"Hi (Name Goes Here)!\",\n  botLoading: false\n};\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateUserMessages = newMessage => {\n      //newMessage === userInput\n      if (!newMessage) {\n        return;\n      }\n\n      let updatedMessages = this.state.userMessages;\n      let updatedBotMessages = this.state.botMessages;\n      this.setState({\n        userMessages: updatedMessages.concat(newMessage),\n        //adds every user message entered to userMessages in state\n        botLoading: true\n      });\n      let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" + newMessage + \"&sessionId=12345\", {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      });\n      fetch(request).then(response => response.json()).then(json => {\n        let botResponse = json.result.fulfillment.speech;\n        this.setState({\n          botMessages: updatedBotMessages.concat(botResponse),\n          botLoading: false\n        });\n      }).catch(error => {\n        console.log(\"ERROR:\", error);\n        this.setState({\n          botMessages: updatedBotMessages.concat('?'),\n          botLoading: false\n        });\n      });\n    };\n\n    this.scrollBubble = element => {\n      if (element != null) {\n        element.scrollIntoView(true);\n      }\n    };\n\n    this.showMessages = () => {\n      let userMessages = this.state.userMessages;\n      let botMessages = this.state.botMessages;\n      let allMessages = [];\n      let i = 0; //line 98\n\n      for (; i < userMessages.length; i++) {\n        if (i === userMessages.length - 1) {\n          if (botMessages[i]) {\n            //if last msg was from bot\n            allMessages.push(React.createElement(UserBubble, {\n              message: userMessages[i],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 79\n              },\n              __self: this\n            }));\n            allMessages.push(React.createElement(BotBubble, {\n              message: botMessages[i],\n              thisRef: this.scrollBubble,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81\n              },\n              __self: this\n            }));\n          } else {\n            allMessages.push( //if last msg was from user\n            React.createElement(UserBubble, {\n              message: userMessages[i],\n              thisRef: this.scrollBubble,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85\n              },\n              __self: this\n            }));\n          }\n\n          break;\n        } //if message is not the last message then push user and bot components to allMessages\n\n\n        allMessages.push(React.createElement(UserBubble, {\n          message: userMessages[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }));\n        allMessages.push(React.createElement(BotBubble, {\n          message: botMessages[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }));\n      }\n\n      allMessages.unshift( //include greeting \n      React.createElement(BotBubble, {\n        message: this.state.botGreeting,\n        thisRef: i === 0 ? this.scrollBubble : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }));\n      return React.createElement(\"div\", {\n        className: \"msg-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, allMessages); //All messages displayed on chat\n    };\n\n    this.onInput = event => {\n      event.preventDefault();\n      let userInput = event.target.value.msg;\n      this.updateUserMessages(userInput);\n      event.target.value = \"\";\n    };\n\n    this.onClick = () => {\n      let inp = document.getElementById(\"chat\").value;\n      let userInput = inp.value;\n      this.updateUserMessages(userInput);\n      inp.value = \"\";\n    };\n\n    this.state = data;\n  } //Function adds user and bot messages to state\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chat-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(ChatHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), this.showMessages(), React.createElement(UserInput, {\n      onInput: this.onInput,\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass UserBubble extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"user-message-container\",\n      ref: this.props.thisRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chat-bubble user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.props.message));\n  }\n\n}\n\nclass BotBubble extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"bot-message-container\",\n      ref: this.props.thisRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bot-avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"chat-bubble bot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.props.message));\n  }\n\n}\n\nlet UserInput = props => {\n  //   form / onSubmit -- run the onInput function :)\n  return React.createElement(\"form\", {\n    onSubmit: props.onInput,\n    className: \"input-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"chat\",\n    type: \"text\",\n    name: \"userMsg\",\n    ref: msg => this.input.userMsg = msg,\n    placeholder: \"Your message here.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"input-submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/danbikim/Development/Capstone/client/src/components/chat/Chat.js"],"names":["React","ChatHeader","data","userMessages","botMessages","botGreeting","botLoading","Chat","Component","constructor","props","updateUserMessages","newMessage","updatedMessages","state","updatedBotMessages","setState","concat","request","Request","headers","Headers","Authorization","fetch","then","response","json","botResponse","result","fulfillment","speech","catch","error","console","log","scrollBubble","element","scrollIntoView","showMessages","allMessages","i","length","push","unshift","onInput","event","preventDefault","userInput","target","value","msg","onClick","inp","document","getElementById","render","UserBubble","thisRef","message","BotBubble","UserInput","input","userMsg"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C,CAEA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAG;AACPC,EAAAA,YAAY,EAAE,EADP;AAEPC,EAAAA,WAAW,EAAE,EAFN;AAGPC,EAAAA,WAAW,wBAHJ;AAIPC,EAAAA,UAAU,EAAE;AAJL,CAAX;AAOA,eAAe,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAKnBC,kBALmB,GAKEC,UAAU,IAAI;AAAE;AACjC,UAAI,CAACA,UAAL,EAAgB;AACZ;AACH;;AACD,UAAIC,eAAe,GAAG,KAAKC,KAAL,CAAWX,YAAjC;AACA,UAAIY,kBAAkB,GAAG,KAAKD,KAAL,CAAWV,WAApC;AACA,WAAKY,QAAL,CAAc;AACVb,QAAAA,YAAY,EAAEU,eAAe,CAACI,MAAhB,CAAuBL,UAAvB,CADJ;AACwC;AAClDN,QAAAA,UAAU,EAAE;AAFF,OAAd;AAKA,UAAIY,OAAO,GAAG,IAAIC,OAAJ,CAAY,gFACtBP,UADsB,GAEtB,kBAFU,EAGV;AACAQ,QAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjBC,UAAAA,aAAa,EAAE;AADE,SAAZ;AADT,OAHU,CAAd;AAUAC,MAAAA,KAAK,CAACL,OAAD,CAAL,CACKM,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUE,IAAI,IAAI;AACd,YAAIC,WAAW,GAAGD,IAAI,CAACE,MAAL,CAAYC,WAAZ,CAAwBC,MAA1C;AACA,aAAKd,QAAL,CAAc;AACVZ,UAAAA,WAAW,EAAEW,kBAAkB,CAACE,MAAnB,CAA0BU,WAA1B,CADH;AAEVrB,UAAAA,UAAU,EAAE;AAFF,SAAd;AAIC,OARL,EASKyB,KATL,CASWC,KAAK,IAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACA,aAAKhB,QAAL,CAAc;AACVZ,UAAAA,WAAW,EAAEW,kBAAkB,CAACE,MAAnB,CAA0B,GAA1B,CADH;AAEVX,UAAAA,UAAU,EAAE;AAFF,SAAd;AAIC,OAfL;AAgBH,KA1CkB;;AAAA,SA6CnB6B,YA7CmB,GA6CJC,OAAO,IAAI;AACxB,UAAIA,OAAO,IAAI,IAAf,EAAqB;AACnBA,QAAAA,OAAO,CAACC,cAAR,CAAuB,IAAvB;AACD;AACF,KAjDkB;;AAAA,SAoDnBC,YApDmB,GAoDJ,MAAM;AACjB,UAAInC,YAAY,GAAG,KAAKW,KAAL,CAAWX,YAA9B;AACA,UAAIC,WAAW,GAAG,KAAKU,KAAL,CAAWV,WAA7B;AAEA,UAAImC,WAAW,GAAG,EAAlB;AACA,UAAIC,CAAC,GAAG,CAAR,CALiB,CAKN;;AACX,aAAOA,CAAC,GAAGrC,YAAY,CAACsC,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,YAAIA,CAAC,KAAKrC,YAAY,CAACsC,MAAb,GAAsB,CAAhC,EAAmC;AACnC,cAAIrC,WAAW,CAACoC,CAAD,CAAf,EAAoB;AAAE;AAClBD,YAAAA,WAAW,CAACG,IAAZ,CAAiB,oBAAC,UAAD;AAAY,cAAA,OAAO,EAAEvC,YAAY,CAACqC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAjB;AACAD,YAAAA,WAAW,CAACG,IAAZ,CACA,oBAAC,SAAD;AAAW,cAAA,OAAO,EAAEtC,WAAW,CAACoC,CAAD,CAA/B;AAAoC,cAAA,OAAO,EAAE,KAAKL,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAGH,WALD,MAKO;AACHI,YAAAA,WAAW,CAACG,IAAZ,EAAkB;AAClB,gCAAC,UAAD;AAAY,cAAA,OAAO,EAAEvC,YAAY,CAACqC,CAAD,CAAjC;AAAsC,cAAA,OAAO,EAAE,KAAKL,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAGH;;AACD;AACC,SAbgC,CAcjC;;;AACAI,QAAAA,WAAW,CAACG,IAAZ,CAAiB,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAEvC,YAAY,CAACqC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAjB;AACAD,QAAAA,WAAW,CAACG,IAAZ,CAAiB,oBAAC,SAAD;AAAW,UAAA,OAAO,EAAEtC,WAAW,CAACoC,CAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAjB;AACH;;AAEDD,MAAAA,WAAW,CAACI,OAAZ,EAAqB;AACjB,0BAAC,SAAD;AACA,QAAA,OAAO,EAAE,KAAK7B,KAAL,CAAWT,WADpB;AAEA,QAAA,OAAO,EAAEmC,CAAC,KAAK,CAAN,GAAU,KAAKL,YAAf,GAA8B,EAFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOA,aAAO;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCI,WAAhC,CAAP,CAhCiB,CAgC0C;AAC9D,KArFkB;;AAAA,SAwFnBK,OAxFmB,GAwFTC,KAAK,IAAI;AACfA,MAAAA,KAAK,CAACC,cAAN;AACA,UAAIC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmBC,GAAnC;AACA,WAAKvC,kBAAL,CAAwBoC,SAAxB;AACAF,MAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqB,EAArB;AAEH,KA9FkB;;AAAA,SAgGnBE,OAhGmB,GAgGT,MAAM;AACd,UAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCL,KAA1C;AACA,UAAIF,SAAS,GAAGK,GAAG,CAACH,KAApB;AAEA,WAAKtC,kBAAL,CAAwBoC,SAAxB;AACAK,MAAAA,GAAG,CAACH,KAAJ,GAAY,EAAZ;AACD,KAtGkB;;AAEjB,SAAKnC,KAAL,GAAaZ,IAAb;AACD,GAJ6C,CAK9C;;;AAoGAqD,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKjB,YAAL,EAFH,EAGE,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKM,OAAzB;AAAkC,MAAA,OAAO,EAAE,KAAKO,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,CADF;AASD;;AAnH6C;;AAsHhD,MAAMK,UAAN,SAAyBxD,KAAK,CAACQ,SAA/B,CAAyC;AACvC+C,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAwC,MAAA,GAAG,EAAE,KAAK7C,KAAL,CAAW+C,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK/C,KAAL,CAAWgD,OADd,CADF,CADF;AAOD;;AATsC;;AAYzC,MAAMC,SAAN,SAAwB3D,KAAK,CAACQ,SAA9B,CAAwC;AACtC+C,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAuC,MAAA,GAAG,EAAE,KAAK7C,KAAL,CAAW+C,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK/C,KAAL,CAAWgD,OADd,CAFF,CADF;AAQD;;AAVqC;;AAaxC,IAAIE,SAAS,GAAGlD,KAAK,IAAI;AACvB;AACA,SACE;AAAM,IAAA,QAAQ,EAAEA,KAAK,CAACkC,OAAtB;AAA+B,IAAA,SAAS,EAAC,iBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,EAAE,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,MAAtB;AAA6B,IAAA,IAAI,EAAC,SAAlC;AAA4C,IAAA,GAAG,EAAEM,GAAG,IAAI,KAAKW,KAAL,CAAWC,OAAX,GAAqBZ,GAA7E;AAAkF,IAAA,WAAW,EAAC,oBAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CARD","sourcesContent":["import React from 'react';\nimport './chat.scss';\nimport ChatHeader from '../header/Header';\n\n//Thanks to the following for help:\n// * https://codepen.io/johnludena/pen/JvMvzB\n// * https://codepen.io/jenning/pen/JZzeJW\n// * https://codepen.io/zephyo/pen/MZmdjb?editors=0110\n\nlet data = {\n    userMessages: [],\n    botMessages: [],\n    botGreeting: `Hi (Name Goes Here)!`,\n    botLoading: false\n};\n\nexport default class Chat extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = data;\n    }\n    //Function adds user and bot messages to state\n    updateUserMessages = newMessage => { //newMessage === userInput\n        if (!newMessage){\n            return;  \n        }\n        let updatedMessages = this.state.userMessages;\n        let updatedBotMessages = this.state.botMessages;\n        this.setState({\n            userMessages: updatedMessages.concat(newMessage), //adds every user message entered to userMessages in state\n            botLoading: true\n        });\n        \n        let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" +\n            newMessage +\n            \"&sessionId=12345\",\n            {\n            headers: new Headers({\n                Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n            })\n            }\n        );\n    \n        fetch(request)\n            .then(response => response.json())\n            .then(json => {\n            let botResponse = json.result.fulfillment.speech;\n            this.setState({\n                botMessages: updatedBotMessages.concat(botResponse),\n                botLoading: false\n            });\n            })\n            .catch(error => {\n            console.log(\"ERROR:\", error);\n            this.setState({\n                botMessages: updatedBotMessages.concat('?'),\n                botLoading: false\n            });\n            });\n    };\n    \n    //scroll to view\n    scrollBubble = element => {\n      if (element != null) {\n        element.scrollIntoView(true);\n      }\n    };\n    \n    //display msgs in state by pushing components into allMessages array\n    showMessages = () => {\n        let userMessages = this.state.userMessages;\n        let botMessages = this.state.botMessages;\n    \n        let allMessages = []; \n        let i = 0; //line 98\n        for (; i < userMessages.length; i++) {\n            if (i === userMessages.length - 1) {\n            if (botMessages[i]) { //if last msg was from bot\n                allMessages.push(<UserBubble message={userMessages[i]} />);\n                allMessages.push(\n                <BotBubble message={botMessages[i]} thisRef={this.scrollBubble} />\n                );\n            } else {\n                allMessages.push( //if last msg was from user\n                <UserBubble message={userMessages[i]} thisRef={this.scrollBubble} />\n                );\n            }\n            break;\n            }\n            //if message is not the last message then push user and bot components to allMessages\n            allMessages.push(<UserBubble message={userMessages[i]} />);\n            allMessages.push(<BotBubble message={botMessages[i]} />);\n        }\n    \n        allMessages.unshift( //include greeting \n            <BotBubble\n            message={this.state.botGreeting}\n            thisRef={i === 0 ? this.scrollBubble : \"\"}\n            />\n        );\n    \n        return <div className=\"msg-container\">{allMessages}</div>; //All messages displayed on chat\n    };\n  \n    //Invoke updateUserMessages function passing in userInput as parameter\n    onInput = event => {\n        event.preventDefault();\n        let userInput = event.target.value.msg;\n        this.updateUserMessages(userInput);\n        event.target.value = \"\";\n      \n    };\n  \n    onClick = () => {\n      let inp = document.getElementById(\"chat\").value;\n      let userInput = inp.value;\n  \n      this.updateUserMessages(userInput);\n      inp.value = \"\";\n    };\n  \n    render() {\n      return (\n        <div className=\"app-container\">\n          <div className=\"chat-container\">\n            <ChatHeader />\n            {this.showMessages()}\n            <UserInput onInput={this.onInput} onClick={this.onClick} />\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class UserBubble extends React.Component {\n    render() {\n      return (\n        <div className=\"user-message-container\" ref={this.props.thisRef}>\n          <div className=\"chat-bubble user\">\n            {this.props.message}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class BotBubble extends React.Component {\n    render() {\n      return (\n        <div className=\"bot-message-container\" ref={this.props.thisRef}>\n          <div className=\"bot-avatar\" />\n          <div className=\"chat-bubble bot\">\n            {this.props.message}\n          </div>\n        </div>\n      );\n    }\n  }\n    \n  let UserInput = props => {\n    //   form / onSubmit -- run the onInput function :)\n    return (\n      <form onSubmit={props.onInput} className=\"input-container\">\n        <input id=\"chat\" type=\"text\" name=\"userMsg\" ref={msg => this.input.userMsg = msg} placeholder=\"Your message here.\"/>\n        <button type=\"submit\" className=\"input-submit\" />\n      </form>\n    );\n  };\n  \n\n  "]},"metadata":{},"sourceType":"module"}