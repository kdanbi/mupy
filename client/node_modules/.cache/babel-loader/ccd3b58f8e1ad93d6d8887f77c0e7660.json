{"ast":null,"code":"var _jsxFileName = \"/Users/danbikim/Development/Capstone/client/src/components/chat/Chat.js\";\nimport React from \"react\";\nimport \"./chat.scss\";\nimport ChatHeader from \"../header/Header\";\nimport BotBubble from \"./Bot-Bubble\";\nimport UserBubble from \"./User-Bubble\";\nimport SpotifyWebApiNode from \"spotify-web-api-node\";\nlet spotifyApi = new SpotifyWebApiNode({\n  clientId: \"f5e8e6f86fdd4361a33a3daaa5bcf808\",\n  clientSecret: \"71a41656726a455a9cc526e9cbf2b168\",\n  redirectUri: \"http://localhost:8888/callback\"\n});\nspotifyApi.setAccessToken(\"BQAgDF8G422vVpHEZ8-0Nef3ryZFhAETlBJycgbEXtEy_CmvWuqvRMHJLXovl91tNYEThBDSnzu1hko-qKtiFRUaZRMIMruaKEMKXoDEuk6lbvW8THrdWMhdU5rJM3yJJMCf7IU6FuKcqwiXKpVO7MXd3W1SyqFvfzbt\"); //Thanks to the following for help:\n// * https://codepen.io/johnludena/pen/JvMvzB\n// * https://codepen.io/jenning/pen/JZzeJW\n// * https://codepen.io/zephyo/pen/MZmdjb?editors=0110\n\nlet data = {\n  userMessages: [],\n  botMessages: [],\n  botGreeting: \"Hi I'm mupy - your music therapy bot! What's your name?\",\n  botLoading: false,\n  moodIdentifier: [],\n  spotifyURL: \"\",\n  shouldContinue: false\n};\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateUserMessages = newMessage => {\n      //newMessage === userInput\n      if (!newMessage) {\n        return;\n      }\n\n      let updatedMessages = this.state.userMessages;\n      let updatedBotMessages = this.state.botMessages;\n      this.setState({\n        userMessages: updatedMessages.concat(newMessage),\n        //adds every user message entered to userMessages in state\n        botLoading: true,\n        newMessage: newMessage,\n        shouldContinue: true\n      });\n      let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" + newMessage + \"&sessionId=12345\", {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      });\n      fetch(request).then(response => response.json()).then(json => {\n        let botResponse = json.result.fulfillment.speech;\n        let currentMood = Object.keys(json.result.parameters);\n        this.setState({\n          botMessages: updatedBotMessages.concat(botResponse),\n          botLoading: false,\n          moodIdentifier: currentMood\n        });\n      }).catch(error => {\n        console.log(\"ERROR:\", error);\n        this.setState({\n          botMessages: updatedBotMessages.concat(\"?\"),\n          botLoading: false\n        });\n      });\n    };\n\n    this.scrollBubble = element => {\n      if (element != null) {\n        element.scrollIntoView(true);\n      }\n    };\n\n    this.showMessages = () => {\n      let userMessages = this.state.userMessages;\n      let botMessages = this.state.botMessages;\n      let allMessages = [];\n      let i = 0; //line 98\n\n      for (; i < userMessages.length; i++) {\n        if (i === userMessages.length - 1) {\n          if (botMessages[i]) {\n            //if last msg was from bot\n            allMessages.push(React.createElement(UserBubble, {\n              message: userMessages[i],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102\n              },\n              __self: this\n            }));\n            allMessages.push(React.createElement(BotBubble, {\n              message: botMessages[i],\n              thisRef: this.scrollBubble,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }));\n          } else {\n            allMessages.push( //if last msg was from user\n            React.createElement(UserBubble, {\n              message: userMessages[i],\n              thisRef: this.scrollBubble,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 109\n              },\n              __self: this\n            }));\n          }\n\n          break;\n        } //if message is not the last message then push user and bot components to allMessages\n\n\n        allMessages.push(React.createElement(UserBubble, {\n          message: userMessages[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }));\n        allMessages.push(React.createElement(BotBubble, {\n          message: botMessages[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }));\n      }\n\n      allMessages.unshift( //include greeting\n      React.createElement(BotBubble, {\n        message: this.state.botGreeting,\n        thisRef: i === 0 ? this.scrollBubble : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }));\n      return React.createElement(\"div\", {\n        className: \"msg-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, allMessages); //All messages displayed on chat\n    };\n\n    this.onInput = event => {\n      event.preventDefault();\n      let userInput = event.target.message.value; //console.log(userInput)\n\n      this.updateUserMessages(userInput);\n      event.target.message.value = \"\";\n    };\n\n    this.componentDidUpdate = () => {\n      let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" + this.state.newMessage + \"&sessionId=12345\", {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      });\n\n      if (!this.state.moodIdentifier.length > 0 || this.state.shouldContinue === true) {\n        fetch(request) //fetch mood keyword from DialogFlow\n        .then(response => response.json()).then(json => {\n          let currentMood = Object.keys(json.result.parameters);\n          return currentMood;\n        }).then(currentMood => {\n          spotifyApi.searchPlaylists(currentMood.join(', ')) //query\n          .then(data => {\n            console.log('playlists', data.body.playlists.items);\n            let num = Math.floor(Math.random() * data.body.playlists.items.length);\n            console.log(data.body.playlists.items);\n            let link = data.body.playlists.items[num].uri;\n            let playlistID = link.slice(17);\n            let spotifyURL = \"https://open.spotify.com/embed/playlist/\".concat(playlistID);\n            this.setState({\n              spotifyURL: spotifyURL,\n              moodIdentifier: currentMood,\n              shouldContinue: false\n            });\n          }).catch(err => {\n            console.log(err);\n          });\n        });\n      }\n    };\n\n    this.state = data;\n  } //Function adds user and bot messages to state\n\n\n  render() {\n    console.log(\"mood\", this.state.moodIdentifier);\n    console.log(\"spotify\", this.state.spotifyURL);\n    console.log();\n    return React.createElement(\"div\", {\n      className: \"app-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chat-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(ChatHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), this.showMessages(), React.createElement(\"form\", {\n      onSubmit: this.onInput,\n      className: \"input-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"chat\",\n      type: \"text\",\n      name: \"message\",\n      placeholder: \"Your message here.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"input-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(\"iframe\", {\n      title: \"this is unique\",\n      id: \"spotify\",\n      src: this.state.spotifyURL,\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/danbikim/Development/Capstone/client/src/components/chat/Chat.js"],"names":["React","ChatHeader","BotBubble","UserBubble","SpotifyWebApiNode","spotifyApi","clientId","clientSecret","redirectUri","setAccessToken","data","userMessages","botMessages","botGreeting","botLoading","moodIdentifier","spotifyURL","shouldContinue","Chat","Component","constructor","props","updateUserMessages","newMessage","updatedMessages","state","updatedBotMessages","setState","concat","request","Request","headers","Headers","Authorization","fetch","then","response","json","botResponse","result","fulfillment","speech","currentMood","Object","keys","parameters","catch","error","console","log","scrollBubble","element","scrollIntoView","showMessages","allMessages","i","length","push","unshift","onInput","event","preventDefault","userInput","target","message","value","componentDidUpdate","searchPlaylists","join","body","playlists","items","num","Math","floor","random","link","uri","playlistID","slice","err","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./chat.scss\";\nimport ChatHeader from \"../header/Header\";\nimport BotBubble from \"./Bot-Bubble\";\nimport UserBubble from \"./User-Bubble\";\nimport SpotifyWebApiNode from \"spotify-web-api-node\";\n\nlet spotifyApi = new SpotifyWebApiNode({\n  clientId: \"f5e8e6f86fdd4361a33a3daaa5bcf808\",\n  clientSecret: \"71a41656726a455a9cc526e9cbf2b168\",\n  redirectUri: \"http://localhost:8888/callback\"\n});\n\nspotifyApi.setAccessToken(\n  \"BQAgDF8G422vVpHEZ8-0Nef3ryZFhAETlBJycgbEXtEy_CmvWuqvRMHJLXovl91tNYEThBDSnzu1hko-qKtiFRUaZRMIMruaKEMKXoDEuk6lbvW8THrdWMhdU5rJM3yJJMCf7IU6FuKcqwiXKpVO7MXd3W1SyqFvfzbt\"\n);\n\n//Thanks to the following for help:\n// * https://codepen.io/johnludena/pen/JvMvzB\n// * https://codepen.io/jenning/pen/JZzeJW\n// * https://codepen.io/zephyo/pen/MZmdjb?editors=0110\n\nlet data = {\n  userMessages: [],\n  botMessages: [],\n  botGreeting: `Hi I'm mupy - your music therapy bot! What's your name?`,\n  botLoading: false,\n  moodIdentifier: [],\n  spotifyURL: \"\",\n  shouldContinue: false\n};\n\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = data;\n  }\n  //Function adds user and bot messages to state\n  updateUserMessages = newMessage => {\n    //newMessage === userInput\n    if (!newMessage) {\n      return;\n    }\n    let updatedMessages = this.state.userMessages;\n    let updatedBotMessages = this.state.botMessages;\n    this.setState({\n      userMessages: updatedMessages.concat(newMessage), //adds every user message entered to userMessages in state\n      botLoading: true,\n      newMessage: newMessage,\n      shouldContinue: true\n    });\n\n    let request = new Request(\n      \"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" +\n        newMessage +\n        \"&sessionId=12345\",\n      {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      }\n    );\n\n    fetch(request)\n      .then(response => response.json())\n      .then(json => {\n        let botResponse = json.result.fulfillment.speech;\n        let currentMood = Object.keys(json.result.parameters);\n        this.setState({\n          botMessages: updatedBotMessages.concat(botResponse),\n          botLoading: false,\n          moodIdentifier: currentMood\n        });\n      })\n      .catch(error => {\n        console.log(\"ERROR:\", error);\n        this.setState({\n          botMessages: updatedBotMessages.concat(\"?\"),\n          botLoading: false\n        });\n      });\n  };\n\n  //scroll to view\n  scrollBubble = element => {\n    if (element != null) {\n      element.scrollIntoView(true);\n    }\n  };\n\n  //display msgs in state by pushing components into allMessages array\n  showMessages = () => {\n    let userMessages = this.state.userMessages;\n    let botMessages = this.state.botMessages;\n\n    let allMessages = [];\n    let i = 0; //line 98\n    for (; i < userMessages.length; i++) {\n      if (i === userMessages.length - 1) {\n        if (botMessages[i]) {\n          //if last msg was from bot\n          allMessages.push(<UserBubble message={userMessages[i]} />);\n          allMessages.push(\n            <BotBubble message={botMessages[i]} thisRef={this.scrollBubble} />\n          );\n        } else {\n          allMessages.push(\n            //if last msg was from user\n            <UserBubble message={userMessages[i]} thisRef={this.scrollBubble} />\n          );\n        }\n        break;\n      }\n      //if message is not the last message then push user and bot components to allMessages\n      allMessages.push(<UserBubble message={userMessages[i]} />);\n      allMessages.push(<BotBubble message={botMessages[i]} />);\n    }\n\n    allMessages.unshift(\n      //include greeting\n      <BotBubble\n        message={this.state.botGreeting}\n        thisRef={i === 0 ? this.scrollBubble : \"\"}\n      />\n    );\n\n    return <div className=\"msg-container\">{allMessages}</div>; //All messages displayed on chat\n  };\n\n  //Invoke updateUserMessages function passing in userInput as parameter\n  onInput = event => {\n    event.preventDefault();\n    let userInput = event.target.message.value;\n    //console.log(userInput)\n    this.updateUserMessages(userInput);\n    event.target.message.value = \"\";\n  };\n\n  componentDidUpdate = () => {\n    let request = new Request(\n      \"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" +\n        this.state.newMessage +\n        \"&sessionId=12345\",\n      {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      }\n    );\n\n    if (!this.state.moodIdentifier.length > 0 || this.state.shouldContinue===true) {\n      fetch(request) //fetch mood keyword from DialogFlow\n        .then(response => response.json())\n        .then(json => {\n          let currentMood = Object.keys(json.result.parameters);\n          return currentMood\n        })\n        .then((currentMood) => {\n            spotifyApi\n            .searchPlaylists(currentMood.join(', ')) //query\n            .then(data => {\n              console.log('playlists',data.body.playlists.items)\n              let num = Math.floor(Math.random() * (data.body.playlists.items.length));  \n              console.log(data.body.playlists.items)\n              let link = data.body.playlists.items[num].uri;\n              let playlistID = link.slice(17);\n              let spotifyURL = `https://open.spotify.com/embed/playlist/${playlistID}`;\n              this.setState({ \n                spotifyURL: spotifyURL,\n                moodIdentifier: currentMood,\n                shouldContinue: false\n              });\n            })\n            .catch(err => {\n              console.log(err);\n            });\n        })\n    }\n  };\n\n  render() {\n    console.log(\"mood\", this.state.moodIdentifier);\n    console.log(\"spotify\", this.state.spotifyURL);\n    console.log();\n    return (\n      <div className=\"app-container\">\n        <div className=\"chat-container\">\n          <ChatHeader />\n          {this.showMessages()}\n          <form onSubmit={this.onInput} className=\"input-container\">\n            <input\n              id=\"chat\"\n              type=\"text\"\n              name=\"message\"\n              placeholder=\"Your message here.\"\n            />\n            <button type=\"submit\" className=\"input-submit\" />\n          </form>\n          <iframe\n            title=\"this is unique\"\n            id=\"spotify\"\n            src={this.state.spotifyURL}\n            frameBorder=\"0\"\n            allowtransparency=\"true\"\n            allow=\"encrypted-media\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}