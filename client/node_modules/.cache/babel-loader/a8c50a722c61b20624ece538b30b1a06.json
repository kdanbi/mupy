{"ast":null,"code":"var _jsxFileName = \"/Users/danbikim/Development/Capstone/client/src/components/chat/Chat.js\";\nimport React from 'react';\nimport './chat.scss';\nimport ChatHeader from '../header/Header';\nimport BotBubble from './Bot-Bubble';\nimport UserBubble from './User-Bubble';\nimport SpotifyWebApiNode from 'spotify-web-api-node';\nlet spotifyApi = new SpotifyWebApiNode({\n  clientId: 'f5e8e6f86fdd4361a33a3daaa5bcf808',\n  clientSecret: '71a41656726a455a9cc526e9cbf2b168',\n  redirectUri: 'http://localhost:8888/callback'\n});\nspotifyApi.setAccessToken('BQA4OuSo60_8-42I9N63sS-zrJlDIl_9N4QJDr5tJSLb7gEgapYrUMYMOowzI8DiyIDRDaZ_I5GewEzu3SWPx-QoKHmE8yI19PGgd8kyndxpoRb-dCp4uXweNMfKa2gsEQoa2WCNG1ptrAOWpf6WVGGcQw0uxYN9GJ4m'); //Thanks to the following for help:\n// * https://codepen.io/johnludena/pen/JvMvzB\n// * https://codepen.io/jenning/pen/JZzeJW\n// * https://codepen.io/zephyo/pen/MZmdjb?editors=0110\n\nlet data = {\n  userMessages: [],\n  botMessages: [],\n  botGreeting: \"Hi (Name Goes Here)!\",\n  botLoading: false,\n  moodIdentifier: [],\n  spotifyURL: ''\n};\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateUserMessages = newMessage => {\n      //newMessage === userInput\n      if (!newMessage) {\n        return;\n      }\n\n      let updatedMessages = this.state.userMessages;\n      let updatedBotMessages = this.state.botMessages;\n      this.setState({\n        userMessages: updatedMessages.concat(newMessage),\n        //adds every user message entered to userMessages in state\n        botLoading: true\n      });\n      let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" + newMessage + \"&sessionId=12345\", {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      });\n      fetch(request).then(response => response.json()).then(json => {\n        let botResponse = json.result.fulfillment.speech; //let currentMood = json.result.parameters[0];\n        //console.log(currentMood)\n\n        this.setState({\n          botMessages: updatedBotMessages.concat(botResponse),\n          botLoading: false //moodIdentifier: currentMood\n\n        });\n      }).catch(error => {\n        console.log(\"ERROR:\", error);\n        this.setState({\n          botMessages: updatedBotMessages.concat('?'),\n          botLoading: false\n        });\n      });\n    };\n\n    this.scrollBubble = element => {\n      if (element != null) {\n        element.scrollIntoView(true);\n      }\n    };\n\n    this.showMessages = () => {\n      let userMessages = this.state.userMessages;\n      let botMessages = this.state.botMessages;\n      let allMessages = [];\n      let i = 0; //line 98\n\n      for (; i < userMessages.length; i++) {\n        if (i === userMessages.length - 1) {\n          if (botMessages[i]) {\n            //if last msg was from bot\n            allMessages.push(React.createElement(UserBubble, {\n              message: userMessages[i],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 97\n              },\n              __self: this\n            }));\n            allMessages.push(React.createElement(BotBubble, {\n              message: botMessages[i],\n              thisRef: this.scrollBubble,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 99\n              },\n              __self: this\n            }));\n          } else {\n            allMessages.push( //if last msg was from user\n            React.createElement(UserBubble, {\n              message: userMessages[i],\n              thisRef: this.scrollBubble,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103\n              },\n              __self: this\n            }));\n          }\n\n          break;\n        } //if message is not the last message then push user and bot components to allMessages\n\n\n        allMessages.push(React.createElement(UserBubble, {\n          message: userMessages[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }));\n        allMessages.push(React.createElement(BotBubble, {\n          message: botMessages[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }));\n      }\n\n      allMessages.unshift( //include greeting \n      React.createElement(BotBubble, {\n        message: this.state.botGreeting,\n        thisRef: i === 0 ? this.scrollBubble : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }));\n      return React.createElement(\"div\", {\n        className: \"msg-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, allMessages); //All messages displayed on chat\n    };\n\n    this.onInput = event => {\n      event.preventDefault();\n      let userInput = event.target.message.value; //console.log(userInput)\n\n      this.updateUserMessages(userInput);\n      event.target.message.value = \"\";\n    };\n\n    this.componentDidUpdate = () => {\n      if (!this.state.spotifyURL) {\n        spotifyApi.searchPlaylists('stressed').then(data => {\n          let link = data.body.playlists.items[0].uri;\n          let playlistID = link.slice(17);\n          let spotifyURL = \"https://open.spotify.com/embed/playlist/\".concat(playlistID);\n          this.setState({\n            spotifyURL: spotifyURL\n          });\n          console.log(spotifyURL);\n        }, err => {\n          console.log(err);\n        });\n      }\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" + this.newMessage + \"&sessionId=12345\", {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      });\n\n      if (prevProps) {\n        fetch(request).then(response => response.json()).then(json => {\n          let currentMood = json.result.parameters[0];\n          console.log('HERE', json.result);\n          this.setState({\n            moodIdentifier: currentMood\n          });\n        });\n      }\n    };\n\n    this.state = data;\n  } //Function adds user and bot messages to state\n\n\n  render() {\n    console.log(this.state.currentMood);\n    return React.createElement(\"div\", {\n      className: \"app-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chat-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(ChatHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), this.showMessages(), React.createElement(\"form\", {\n      onSubmit: this.onInput,\n      className: \"input-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"chat\",\n      type: \"text\",\n      name: \"message\",\n      placeholder: \"Your message here.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"input-submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(\"iframe\", {\n      title: \"this is unique\",\n      id: \"spotify\",\n      src: this.state.spotifyURL,\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })));\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/danbikim/Development/Capstone/client/src/components/chat/Chat.js"],"names":["React","ChatHeader","BotBubble","UserBubble","SpotifyWebApiNode","spotifyApi","clientId","clientSecret","redirectUri","setAccessToken","data","userMessages","botMessages","botGreeting","botLoading","moodIdentifier","spotifyURL","Chat","Component","constructor","props","updateUserMessages","newMessage","updatedMessages","state","updatedBotMessages","setState","concat","request","Request","headers","Headers","Authorization","fetch","then","response","json","botResponse","result","fulfillment","speech","catch","error","console","log","scrollBubble","element","scrollIntoView","showMessages","allMessages","i","length","push","unshift","onInput","event","preventDefault","userInput","target","message","value","componentDidUpdate","searchPlaylists","link","body","playlists","items","uri","playlistID","slice","err","prevProps","prevState","currentMood","parameters","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './chat.scss';\nimport ChatHeader from '../header/Header';\nimport BotBubble from './Bot-Bubble';\nimport UserBubble from './User-Bubble';\nimport SpotifyWebApiNode from 'spotify-web-api-node';\n\nlet spotifyApi = new SpotifyWebApiNode({\n  clientId: 'f5e8e6f86fdd4361a33a3daaa5bcf808',\n  clientSecret: '71a41656726a455a9cc526e9cbf2b168',\n  redirectUri: 'http://localhost:8888/callback'\n});\n\nspotifyApi.setAccessToken('BQA4OuSo60_8-42I9N63sS-zrJlDIl_9N4QJDr5tJSLb7gEgapYrUMYMOowzI8DiyIDRDaZ_I5GewEzu3SWPx-QoKHmE8yI19PGgd8kyndxpoRb-dCp4uXweNMfKa2gsEQoa2WCNG1ptrAOWpf6WVGGcQw0uxYN9GJ4m');\n\n//Thanks to the following for help:\n// * https://codepen.io/johnludena/pen/JvMvzB\n// * https://codepen.io/jenning/pen/JZzeJW\n// * https://codepen.io/zephyo/pen/MZmdjb?editors=0110\n\nlet data = {\n    userMessages: [],\n    botMessages: [],\n    botGreeting: `Hi (Name Goes Here)!`,\n    botLoading: false,\n    moodIdentifier: [],\n    spotifyURL: ''\n};\n\n\n\nexport default class Chat extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = data;\n    }\n    //Function adds user and bot messages to state\n    updateUserMessages = newMessage => { //newMessage === userInput\n        if (!newMessage){\n            return;  \n        }\n        let updatedMessages = this.state.userMessages;\n        let updatedBotMessages = this.state.botMessages;\n        this.setState({\n            userMessages: updatedMessages.concat(newMessage), //adds every user message entered to userMessages in state\n            botLoading: true\n        });\n        \n        let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" +\n            newMessage +\n            \"&sessionId=12345\",\n            {\n            headers: new Headers({\n                Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n            })\n            }\n        );\n    \n        fetch(request)\n            .then(response => response.json())\n            .then(json => {\n            let botResponse = json.result.fulfillment.speech;\n            //let currentMood = json.result.parameters[0];\n            //console.log(currentMood)\n            this.setState({\n                botMessages: updatedBotMessages.concat(botResponse),\n                botLoading: false,\n                //moodIdentifier: currentMood\n            });\n            })\n            .catch(error => {\n            console.log(\"ERROR:\", error);\n            this.setState({\n                botMessages: updatedBotMessages.concat('?'),\n                botLoading: false\n            });\n            });\n    };\n    \n    //scroll to view\n    scrollBubble = element => {\n      if (element != null) {\n        element.scrollIntoView(true);\n      }\n    };\n    \n    //display msgs in state by pushing components into allMessages array\n    showMessages = () => {\n        let userMessages = this.state.userMessages;\n        let botMessages = this.state.botMessages;\n    \n        let allMessages = []; \n        let i = 0; //line 98\n        for (; i < userMessages.length; i++) {\n            if (i === userMessages.length - 1) {\n            if (botMessages[i]) { //if last msg was from bot\n                allMessages.push(<UserBubble message={userMessages[i]} />);\n                allMessages.push(\n                <BotBubble message={botMessages[i]} thisRef={this.scrollBubble} />\n                );\n            } else {\n                allMessages.push( //if last msg was from user\n                <UserBubble message={userMessages[i]} thisRef={this.scrollBubble} />\n                );\n            }\n            break;\n            }\n            //if message is not the last message then push user and bot components to allMessages\n            allMessages.push(<UserBubble message={userMessages[i]} />);\n            allMessages.push(<BotBubble message={botMessages[i]} />);\n        }\n    \n        allMessages.unshift( //include greeting \n            <BotBubble\n            message={this.state.botGreeting}\n            thisRef={i === 0 ? this.scrollBubble : \"\"}\n            />\n        );\n    \n        return <div className=\"msg-container\">{allMessages}</div>; //All messages displayed on chat\n    };\n  \n    //Invoke updateUserMessages function passing in userInput as parameter\n    onInput = event => {\n        event.preventDefault();\n        let userInput = event.target.message.value;\n        //console.log(userInput)\n        this.updateUserMessages(userInput);\n        event.target.message.value = \"\";\n      \n    };\n    componentDidUpdate = () => {\n        if (!this.state.spotifyURL) {\n            spotifyApi.searchPlaylists('stressed')\n            .then((data) => {\n                let link = data.body.playlists.items[0].uri\n                let playlistID = link.slice(17)\n                let spotifyURL = `https://open.spotify.com/embed/playlist/${playlistID}`;\n                this.setState({spotifyURL: spotifyURL});\n                console.log(spotifyURL)\n            }, (err) => {\n            console.log(err);\n            });\n        }\n    }\n    componentDidUpdate = (prevProps, prevState) => {\n\n        let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" + this.newMessage + \"&sessionId=12345\",{\n            headers: new Headers({ Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n                })\n            }\n        );\n        if (prevProps ) {\n            fetch(request)\n                .then(response => response.json())\n                .then(json => {\n                let currentMood = json.result.parameters[0];\n                console.log('HERE',json.result)\n                this.setState({\n                    moodIdentifier: currentMood\n                });\n                })\n        }\n    }\n\n    render() {\n        console.log(this.state.currentMood)\n      return (\n        <div className=\"app-container\">\n          <div className=\"chat-container\">\n            <ChatHeader />\n            {this.showMessages()}\n            <form onSubmit={this.onInput} className=\"input-container\">\n                <input id=\"chat\" type=\"text\" name=\"message\" placeholder=\"Your message here.\"/>\n                <button type=\"submit\" className=\"input-submit\" />\n            </form>\n            <iframe title=\"this is unique\" id=\"spotify\" src={this.state.spotifyURL} frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n          </div>\n        </div>\n      );\n    };\n  };\n\n  "]},"metadata":{},"sourceType":"module"}