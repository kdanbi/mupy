{"ast":null,"code":"var _jsxFileName = \"/Users/danbikim/Development/Capstone/client/src/components/chat/Chat.js\";\nimport React from 'react';\nimport './chat.scss';\nimport ChatHeader from '../header/Header'; //Thanks to the following for help:\n// * https://codepen.io/johnludena/pen/JvMvzB\n// * https://codepen.io/jenning/pen/JZzeJW\n// * https://codepen.io/zephyo/pen/MZmdjb?editors=0110\n\nlet data = {\n  userMessages: [],\n  botMessages: [],\n  botGreeting: \"Hi (Name Goes Here)!\",\n  botLoading: false\n};\nexport default class Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateUserMessages = newMessage => {\n      //newMessage === userInput\n      if (!newMessage) {\n        return;\n      }\n\n      let updatedMessages = this.state.userMessages;\n      let updatedBotMessages = this.state.botMessages;\n      this.setState({\n        userMessages: updatedMessages.concat(newMessage),\n        //adds every user message entered to userMessages in state\n        botLoading: true\n      });\n      let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" + newMessage + \"&sessionId=12345\", {\n        headers: new Headers({\n          Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n        })\n      });\n      fetch(request).then(response => response.json()).then(json => {\n        let botResponse = json.result.fulfillment.speech;\n        this.setState({\n          botMessages: updatedBotMessages.concat(botResponse),\n          botLoading: false\n        });\n      }).catch(error => {\n        console.log(\"ERROR:\", error);\n        this.setState({\n          botMessages: updatedBotMessages.concat('?'),\n          botLoading: false\n        });\n      });\n    };\n\n    this.scrollBubble = element => {\n      if (element != null) {\n        element.scrollIntoView(true);\n      }\n    };\n\n    this.showMessages = () => {\n      let userMessages = this.state.userMessages;\n      let botMessages = this.state.botMessages;\n      let allMessages = [];\n      let i = 0;\n\n      for (; i < userMessages.length; i++) {\n        if (i === userMessages.length - 1) {\n          //if bot replied to last message\n          if (botMessages[i]) {\n            allMessages.push(React.createElement(UserBubble, {\n              message: userMessages[i],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 80\n              },\n              __self: this\n            }));\n            allMessages.push(React.createElement(BotBubble, {\n              message: botMessages[i],\n              thisRef: this.scrollBubble,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82\n              },\n              __self: this\n            }));\n          } else {\n            allMessages.push(React.createElement(UserBubble, {\n              message: userMessages[i],\n              thisRef: this.scrollBubble,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 86\n              },\n              __self: this\n            }));\n          }\n\n          break;\n        }\n\n        allMessages.push(React.createElement(UserBubble, {\n          message: userMessages[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }));\n        allMessages.push(React.createElement(BotBubble, {\n          message: botMessages[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }));\n      }\n\n      allMessages.unshift(React.createElement(BotBubble, {\n        message: this.state.botGreeting,\n        thisRef: i === 0 ? this.scrollBubble : \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }));\n      return React.createElement(\"div\", {\n        className: \"msg-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, allMessages);\n    };\n\n    this.onInput = event => {\n      if (event.key === \"Enter\") {\n        let userInput = event.target.value;\n        this.updateUserMessages(userInput);\n        event.target.value = \"\";\n      }\n\n      if (event.target.value !== \"\") {\n        event.target.parentElement.style.background = 'rgba(69,58,148,0.6)';\n      } else {\n        event.target.parentElement.style.background = 'rgba(255, 255, 255, 0.6)';\n      }\n    };\n\n    this.onClick = () => {\n      let inp = document.getElementById(\"chat\");\n      let userInput = inp.value;\n      this.updateUserMessages(userInput);\n      inp.value = \"\";\n    };\n\n    this.state = data;\n  } //Function adds user and bot messages to states\n\n\n  render() {\n    const username = this.props.match.params.username; //console.log(username);\n\n    return React.createElement(\"div\", {\n      className: \"app-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chat-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(ChatHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), this.showMessages(), React.createElement(UserInput, {\n      onInput: this.onInput,\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })));\n  }\n\n}\n\nclass UserBubble extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"user-message-container\",\n      ref: this.props.thisRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chat-bubble user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, this.props.message));\n  }\n\n}\n\nclass BotBubble extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"bot-message-container\",\n      ref: this.props.thisRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bot-avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"chat-bubble bot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.props.message));\n  }\n\n}\n\nlet UserInput = props => {\n  //   form / onSubmit -- run the onInput function :)\n  return React.createElement(\"div\", {\n    className: \"input-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"chat\",\n    type: \"text\",\n    onKeyPress: props.onInput,\n    placeholder: \"type something\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"input-submit\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/danbikim/Development/Capstone/client/src/components/chat/Chat.js"],"names":["React","ChatHeader","data","userMessages","botMessages","botGreeting","botLoading","Chat","Component","constructor","props","updateUserMessages","newMessage","updatedMessages","state","updatedBotMessages","setState","concat","request","Request","headers","Headers","Authorization","fetch","then","response","json","botResponse","result","fulfillment","speech","catch","error","console","log","scrollBubble","element","scrollIntoView","showMessages","allMessages","i","length","push","unshift","onInput","event","key","userInput","target","value","parentElement","style","background","onClick","inp","document","getElementById","render","username","match","params","UserBubble","thisRef","message","BotBubble","UserInput"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './chat.scss';\nimport ChatHeader from '../header/Header';\n\n//Thanks to the following for help:\n// * https://codepen.io/johnludena/pen/JvMvzB\n// * https://codepen.io/jenning/pen/JZzeJW\n// * https://codepen.io/zephyo/pen/MZmdjb?editors=0110\n\nlet data = {\n    userMessages: [],\n    botMessages: [],\n    botGreeting: `Hi (Name Goes Here)!`,\n    botLoading: false\n};\n\nexport default class Chat extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = data;\n    }\n    //Function adds user and bot messages to states\n    updateUserMessages = newMessage => { //newMessage === userInput\n        if (!newMessage){\n            return;  \n        }\n        let updatedMessages = this.state.userMessages;\n        let updatedBotMessages = this.state.botMessages;\n        this.setState({\n            userMessages: updatedMessages.concat(newMessage), //adds every user message entered to userMessages in state\n            botLoading: true\n        });\n        \n        let request = new Request(\"https://api.dialogflow.com/v1/query?v=20150910&contexts=shop&lang=en&query=\" +\n            newMessage +\n            \"&sessionId=12345\",\n            {\n            headers: new Headers({\n                Authorization: \"Bearer 09b0b56442394d17907d2f63d856faf2\"\n            })\n            }\n        );\n    \n        fetch(request)\n            .then(response => response.json())\n            .then(json => {\n            let botResponse = json.result.fulfillment.speech;\n            this.setState({\n                botMessages: updatedBotMessages.concat(botResponse),\n                botLoading: false\n            });\n            })\n            .catch(error => {\n            console.log(\"ERROR:\", error);\n            this.setState({\n                botMessages: updatedBotMessages.concat('?'),\n                botLoading: false\n            });\n            });\n    };\n    \n    //\n    scrollBubble = element => {\n      if (element != null) {\n        element.scrollIntoView(true);\n      }\n    };\n  \n    showMessages = () => {\n      let userMessages = this.state.userMessages;\n      let botMessages = this.state.botMessages;\n  \n      let allMessages = [];\n    \n      let i = 0;\n      for (; i < userMessages.length; i++) {\n        if (i === userMessages.length - 1) {\n          //if bot replied to last message\n          if (botMessages[i]) {\n            allMessages.push(<UserBubble message={userMessages[i]} />);\n            allMessages.push(\n              <BotBubble message={botMessages[i]} thisRef={this.scrollBubble} />\n            );\n          } else {\n            allMessages.push(\n              <UserBubble message={userMessages[i]} thisRef={this.scrollBubble} />\n            );\n          }\n          break;\n        }\n  \n        allMessages.push(<UserBubble message={userMessages[i]} />);\n        allMessages.push(<BotBubble message={botMessages[i]} />);\n      }\n  \n      allMessages.unshift(\n        <BotBubble\n          message={this.state.botGreeting}\n          thisRef={i === 0 ? this.scrollBubble : \"\"}\n        />\n      );\n  \n      return <div className=\"msg-container\">{allMessages}</div>;\n    };\n  \n    onInput = event => {\n      if (event.key === \"Enter\") {\n        let userInput = event.target.value;\n  \n        this.updateUserMessages(userInput);\n        event.target.value = \"\";\n      }\n      \n      if (event.target.value!==\"\"){\n        event.target.parentElement.style.background = 'rgba(69,58,148,0.6)';\n      }\n      else{\n        event.target.parentElement.style.background = 'rgba(255, 255, 255, 0.6)';\n      }\n    };\n  \n    onClick = () => {\n      let inp = document.getElementById(\"chat\");\n      let userInput = inp.value;\n  \n      this.updateUserMessages(userInput);\n      inp.value = \"\";\n    };\n  \n    render() {\n        const { username } = this.props.match.params;\n        //console.log(username);\n      return (\n        <div className=\"app-container\">\n          <div className=\"chat-container\">\n            <ChatHeader />\n            {this.showMessages()}\n            <UserInput onInput={this.onInput} onClick={this.onClick} />\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class UserBubble extends React.Component {\n    render() {\n      return (\n        <div className=\"user-message-container\" ref={this.props.thisRef}>\n          <div className=\"chat-bubble user\">\n            {this.props.message}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class BotBubble extends React.Component {\n    render() {\n      return (\n        <div className=\"bot-message-container\" ref={this.props.thisRef}>\n          <div className=\"bot-avatar\" />\n          <div className=\"chat-bubble bot\">\n            {this.props.message}\n          </div>\n        </div>\n      );\n    }\n  }\n    \n  let UserInput = props => {\n    //   form / onSubmit -- run the onInput function :)\n    return (\n      <div className=\"input-container\">\n        <input\n          id=\"chat\"\n          type=\"text\"\n          onKeyPress={props.onInput}\n          placeholder=\"type something\"\n        />\n        <button className=\"input-submit\" onClick={props.onClick} />\n      </div>\n    );\n  };\n  \n\n  "]},"metadata":{},"sourceType":"module"}